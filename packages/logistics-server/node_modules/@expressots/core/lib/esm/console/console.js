var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Console_1;
import chalk from "chalk";
import { provide } from "inversify-binding-decorators";
/**
 * Enum representing possible color styles for console output.
 */
var ColorStyle;
(function (ColorStyle) {
    ColorStyle[ColorStyle["None"] = 0] = "None";
    ColorStyle[ColorStyle["Yellow"] = 1] = "Yellow";
    ColorStyle[ColorStyle["Blue"] = 2] = "Blue";
    ColorStyle[ColorStyle["Green"] = 3] = "Green";
    ColorStyle[ColorStyle["Red"] = 4] = "Red";
})(ColorStyle || (ColorStyle = {}));
/**
 * The Console class provides methods for displaying styled messages in the console.
 * @provide Console
 */
let Console = Console_1 = class Console {
    /**
     * Print a message to the console with the specified color style.
     * @param message - The message to be printed.
     * @param colorStyle - The color style for the message.
     */
    async printColor(message, colorStyle) {
        switch (colorStyle) {
            case ColorStyle.Yellow:
                return console.log(chalk.bgYellow.black(message));
            case ColorStyle.Blue:
                return console.log(chalk.bgBlue.black(message));
            case ColorStyle.Green:
                return console.log(chalk.bgGreen.black(message));
            case ColorStyle.Red:
                return console.log(chalk.bgRed.black(message));
        }
    }
    /**
     * Display a message in the console with details about the running server.
     * @param port - The port number the server is running on.
     * @param environment - The server environment.
     * @param consoleMessage - Optional application message details for console output.
     */
    async messageServer(port, environment, consoleMessage) {
        const appConsoleMessage = {
            appName: consoleMessage?.appName || "Application",
            appVersion: consoleMessage?.appVersion || "not provided",
        };
        let terminalColor = ColorStyle.None;
        switch (environment.toLowerCase()) {
            case "development":
                terminalColor = ColorStyle.Yellow;
                break;
            case "staging":
                terminalColor = ColorStyle.Blue;
                break;
            case "production":
                terminalColor = ColorStyle.Green;
                break;
            default:
                terminalColor = ColorStyle.Red;
                break;
        }
        this.printColor(`${appConsoleMessage.appName} version ${appConsoleMessage.appVersion} is running on ` +
            `port ${port} - Environment: ${environment}`, terminalColor);
    }
};
Console = Console_1 = __decorate([
    provide(Console_1)
], Console);
export { Console };
