declare enum InformationResponse {
    Continue = 100,
    SwitchingProtocols = 101,
    Processing = 102,
    eEarlyHints = 103
}
declare enum SuccessfulResponse {
    OK = 200,
    Created = 201,
    Accepted = 202,
    NonAuthoritativeInformation = 203,
    NoContent = 204,
    ResetContent = 205,
    PartialContent = 206,
    MultiStatus = 207,
    AlreadyReported = 208,
    IMUsed = 226
}
declare enum RedirectionMessage {
    MultipleChoices = 300,
    MovedPermanently = 301,
    Found = 302,
    SeeOther = 303,
    NotModified = 304,
    TemporaryRedirect = 307,
    PermanentRedirect = 308
}
declare enum ClientErrorResponse {
    BadRequest = 400,
    Unauthorized = 401,
    PaymentRequired = 402,
    Forbidden = 403,
    NotFound = 404,
    MethodNotAllowed = 405,
    NotAcceptable = 406,
    ProxyAuthenticationRequired = 407,
    RequestTimeout = 408,
    Conflict = 409,
    Gone = 410,
    LengthRequired = 411,
    PreconditionFailed = 412,
    PayloadTooLarge = 413,
    URITooLong = 414,
    UnsupportedMediaType = 415,
    RangeNotSatisfiable = 416,
    ExpectationFailed = 417,
    ImATeapot = 418,
    MisdirectedRequest = 421,
    UnprocessableEntity = 422,
    Locked = 423,
    FailedDependency = 424,
    TooEarly = 425,
    UpgradeRequired = 426,
    PreconditionRequired = 428,
    TooManyRequests = 429,
    RequestHeaderFieldsTooLarge = 431,
    UnavailableForLegalReasons = 451
}
declare enum ServerErrorResponse {
    InternalServerError = 500,
    NotImplemented = 501,
    BadGateway = 502,
    ServiceUnavailable = 503,
    GatewayTimeout = 504,
    HTTPVersionNotSupported = 505,
    VariantAlsoNegotiates = 506,
    InsufficientStorage = 507,
    LoopDetected = 508,
    NotExtended = 510,
    NetworkAuthenticationRequired = 511
}
declare const StatusCode: {
    [x: number]: string;
    InternalServerError: ServerErrorResponse.InternalServerError;
    NotImplemented: ServerErrorResponse.NotImplemented;
    BadGateway: ServerErrorResponse.BadGateway;
    ServiceUnavailable: ServerErrorResponse.ServiceUnavailable;
    GatewayTimeout: ServerErrorResponse.GatewayTimeout;
    HTTPVersionNotSupported: ServerErrorResponse.HTTPVersionNotSupported;
    VariantAlsoNegotiates: ServerErrorResponse.VariantAlsoNegotiates;
    InsufficientStorage: ServerErrorResponse.InsufficientStorage;
    LoopDetected: ServerErrorResponse.LoopDetected;
    NotExtended: ServerErrorResponse.NotExtended;
    NetworkAuthenticationRequired: ServerErrorResponse.NetworkAuthenticationRequired;
    BadRequest: ClientErrorResponse.BadRequest;
    Unauthorized: ClientErrorResponse.Unauthorized;
    PaymentRequired: ClientErrorResponse.PaymentRequired;
    Forbidden: ClientErrorResponse.Forbidden;
    NotFound: ClientErrorResponse.NotFound;
    MethodNotAllowed: ClientErrorResponse.MethodNotAllowed;
    NotAcceptable: ClientErrorResponse.NotAcceptable;
    ProxyAuthenticationRequired: ClientErrorResponse.ProxyAuthenticationRequired;
    RequestTimeout: ClientErrorResponse.RequestTimeout;
    Conflict: ClientErrorResponse.Conflict;
    Gone: ClientErrorResponse.Gone;
    LengthRequired: ClientErrorResponse.LengthRequired;
    PreconditionFailed: ClientErrorResponse.PreconditionFailed;
    PayloadTooLarge: ClientErrorResponse.PayloadTooLarge;
    URITooLong: ClientErrorResponse.URITooLong;
    UnsupportedMediaType: ClientErrorResponse.UnsupportedMediaType;
    RangeNotSatisfiable: ClientErrorResponse.RangeNotSatisfiable;
    ExpectationFailed: ClientErrorResponse.ExpectationFailed;
    ImATeapot: ClientErrorResponse.ImATeapot;
    MisdirectedRequest: ClientErrorResponse.MisdirectedRequest;
    UnprocessableEntity: ClientErrorResponse.UnprocessableEntity;
    Locked: ClientErrorResponse.Locked;
    FailedDependency: ClientErrorResponse.FailedDependency;
    TooEarly: ClientErrorResponse.TooEarly;
    UpgradeRequired: ClientErrorResponse.UpgradeRequired;
    PreconditionRequired: ClientErrorResponse.PreconditionRequired;
    TooManyRequests: ClientErrorResponse.TooManyRequests;
    RequestHeaderFieldsTooLarge: ClientErrorResponse.RequestHeaderFieldsTooLarge;
    UnavailableForLegalReasons: ClientErrorResponse.UnavailableForLegalReasons;
    MultipleChoices: RedirectionMessage.MultipleChoices;
    MovedPermanently: RedirectionMessage.MovedPermanently;
    Found: RedirectionMessage.Found;
    SeeOther: RedirectionMessage.SeeOther;
    NotModified: RedirectionMessage.NotModified;
    TemporaryRedirect: RedirectionMessage.TemporaryRedirect;
    PermanentRedirect: RedirectionMessage.PermanentRedirect;
    OK: SuccessfulResponse.OK;
    Created: SuccessfulResponse.Created;
    Accepted: SuccessfulResponse.Accepted;
    NonAuthoritativeInformation: SuccessfulResponse.NonAuthoritativeInformation;
    NoContent: SuccessfulResponse.NoContent;
    ResetContent: SuccessfulResponse.ResetContent;
    PartialContent: SuccessfulResponse.PartialContent;
    MultiStatus: SuccessfulResponse.MultiStatus;
    AlreadyReported: SuccessfulResponse.AlreadyReported;
    IMUsed: SuccessfulResponse.IMUsed;
    Continue: InformationResponse.Continue;
    SwitchingProtocols: InformationResponse.SwitchingProtocols;
    Processing: InformationResponse.Processing;
    eEarlyHints: InformationResponse.eEarlyHints;
};
export { StatusCode };
//# sourceMappingURL=status-code.d.ts.map