/**
 * LogLevel enumeration defines the available log levels.
 */
declare enum LogLevel {
    Debug = 0,
    Error = 1,
    Info = 2
}
/**
 * GeneralLogger class is a utility class to manage logging within the application.
 */
declare class GeneralLogger {
    private logger;
    constructor();
    /**
     * Creates a console transport for logging.
     * @returns {transports.ConsoleTransportInstance} A Winston console transport instance.
     */
    private createConsoleTransport;
    /**
     * Creates a rotational file transport for logging.
     * @returns {DailyRotateFile} A Winston daily rotate file transport instance.
     */
    private createRotationalFileTransport;
    /**
     * Creates a logger options object for Winston.
     * @returns {LoggerOptions} A Winston logger options object.
     */
    private createLoggerOptions;
    /**
     * Retrieves the path and line number of the error.
     * @param error - An Error object containing error details.
     * @returns {string} A string containing the path and line number of the error.
     */
    private getPathAndLine;
    /**
     * Logs a message or error with the specified log level and service.
     * @param logLevel - The log level to use (Debug, Error, or Info).
     * @param content - The message or Error object to log.
     * @param service - The service name (optional) associated with the log.
     */
    log(logLevel: LogLevel, content: Error | string, service?: string): void;
}
declare const log: (logLevel: LogLevel, content: Error | string, service?: string) => void;
export { LogLevel, GeneralLogger, log };
//# sourceMappingURL=general-logger.d.ts.map