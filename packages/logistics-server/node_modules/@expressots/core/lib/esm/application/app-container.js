var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var AppContainer_1;
import { Container } from "inversify";
import { buildProviderModule, provide } from "inversify-binding-decorators";
/**
 * The AppContainer class provides a container for managing dependency injection.
 * @provide AppContainer
 */
let AppContainer = AppContainer_1 = class AppContainer {
    container;
    /**
     * Constructs a new instance of the AppContainer class.
     */
    constructor() { }
    /**
     * Creates and configures a new dependency injection container.
     * @param modules - An array of ContainerModule instances to load into the container.
     * @returns The configured dependency injection container.
     */
    create(modules) {
        this.container = new Container();
        this.container.load(buildProviderModule(), ...modules);
        return this.container;
    }
};
AppContainer = AppContainer_1 = __decorate([
    provide(AppContainer_1),
    __metadata("design:paramtypes", [])
], AppContainer);
export { AppContainer };
