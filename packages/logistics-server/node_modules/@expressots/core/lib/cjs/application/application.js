"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var Application_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServerEnvironment = exports.Application = exports.AppInstance = void 0;
const express_1 = __importDefault(require("express"));
const inversify_binding_decorators_1 = require("inversify-binding-decorators");
const inversify_express_utils_1 = require("inversify-express-utils");
const process_1 = __importDefault(require("process"));
const console_1 = require("../console/console");
const error_handler_middleware_1 = __importDefault(require("../error/error-handler-middleware"));
/**
 * Enum representing possible server environments.
 */
var ServerEnvironment;
(function (ServerEnvironment) {
    ServerEnvironment["Development"] = "development";
    ServerEnvironment["Staging"] = "staging";
    ServerEnvironment["Production"] = "production";
})(ServerEnvironment || (ServerEnvironment = {}));
exports.ServerEnvironment = ServerEnvironment;
/**
 * The Application class provides a way to configure and manage an Express application.
 * @provide Application
 */
let Application = Application_1 = class Application {
    /**
     * Constructs a new instance of the Application class.
     */
    constructor() { }
    /**
     * Configure services that should be initialized before the server starts.
     */
    configureServices() { }
    /**
     * Configure services that should be executed after the server starts.
     */
    postServerInitialization() { }
    /**
     * Perform actions or cleanup after the server is shutdown.
     */
    serverShutdown() {
        process_1.default.exit(0);
    }
    /**
     * Create and configure the Express application.
     * @param container - The InversifyJS container.
     * @param middlewares - An array of Express middlewares to be applied.
     * @returns The configured Application instance.
     */
    create(container, middlewares = []) {
        this.configureServices();
        const expressServer = new inversify_express_utils_1.InversifyExpressServer(container);
        expressServer.setConfig((app) => {
            /* Default body parser application/json */
            app.use(express_1.default.json());
            /* Default body parser application/x-www-form-urlencoded */
            app.use(express_1.default.urlencoded({ extended: true }));
            middlewares.forEach(middleware => {
                app.use(middleware);
            });
        });
        this.app = expressServer.build();
        /* Add the error handler middleware */
        this.app.use(error_handler_middleware_1.default);
        return this;
    }
    /**
     * Start listening on the given port and environment.
     * @param port - The port number to listen on.
     * @param environment - The server environment.
     * @param consoleMessage - Optional message to display in the console.
     */
    listen(port, environment, consoleMessage) {
        this.port = port;
        this.environment = environment;
        this.app.listen(this.port, () => {
            new console_1.Console().messageServer(this.port, this.environment, consoleMessage);
            process_1.default.on("SIGINT", this.serverShutdown.bind(this));
        });
        this.postServerInitialization();
    }
};
Application = Application_1 = __decorate([
    (0, inversify_binding_decorators_1.provide)(Application_1),
    __metadata("design:paramtypes", [])
], Application);
exports.Application = Application;
const appServerInstance = new Application();
exports.AppInstance = appServerInstance;
