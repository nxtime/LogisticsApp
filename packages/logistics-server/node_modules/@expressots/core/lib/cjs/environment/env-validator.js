"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var EnvValidatorProvider_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Environments = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const dotenv_1 = __importDefault(require("dotenv"));
const inversify_binding_decorators_1 = require("inversify-binding-decorators");
const logger_1 = require("../logger");
/**
 * The EnvValidatorProvider class provides utility methods for working with environment variables.
 * It validates, loads, and retrieves environment variables from the .env file.
 * @provide EnvValidatorProvider
 */
let EnvValidatorProvider = EnvValidatorProvider_1 = class EnvValidatorProvider {
    /**
     * Retrieves the value of an environment variable, or a default value if the variable is not set.
     * @param key - The key of the environment variable.
     * @param defaultValue - The default value to return if the environment variable is not set.
     * @returns The value of the environment variable, or the default value if not set.
     */
    static get(key, defaultValue = undefined) {
        var _a;
        return (_a = process.env[key]) !== null && _a !== void 0 ? _a : defaultValue;
    }
    /**
     * Validates and loads all environment variables from the .env file.
     * If the .env file does not exist or any environment variables are not set, the process will exit with an error.
     */
    static checkAll() {
        /* Load .env file */
        dotenv_1.default.config();
        /* Verify if .env file exists */
        const envFilePath = path_1.default.join(process.cwd(), ".", ".env");
        if (!fs_1.default.existsSync(envFilePath)) {
            (0, logger_1.log)(logger_1.LogLevel.Info, "Environment file .env is not defined.", "env-validator-provider");
            process.exit(1);
        }
        const regexIgnoreDefaultEnvKeys = /^npm_config_/;
        let hasError = false;
        for (const key in process.env) {
            if (regexIgnoreDefaultEnvKeys.test(key)) {
                continue;
            }
            if (!process.env[key] || process.env[key] === "") {
                (0, logger_1.log)(logger_1.LogLevel.Info, `Environment variable ${key} is not defined.`, "env-validator-provider");
                hasError = true;
            }
        }
        if (hasError) {
            process.exit(1);
        }
    }
};
EnvValidatorProvider = EnvValidatorProvider_1 = __decorate([
    (0, inversify_binding_decorators_1.provide)(EnvValidatorProvider_1)
], EnvValidatorProvider);
exports.Environments = EnvValidatorProvider;
String.prototype.AsBoolean = function () {
    switch (this.toLowerCase().trim()) {
        case "true":
        case "1":
        case "yes":
            return true;
        case "false":
        case "0":
        case "no":
            return false;
        default:
            return undefined;
    }
};
String.prototype.AsNumber = function () {
    return Number(this);
};
String.prototype.AsString = function () {
    return String(this);
};
