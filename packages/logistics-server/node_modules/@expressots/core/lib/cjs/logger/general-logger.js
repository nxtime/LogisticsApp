"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var GeneralLogger_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.log = exports.GeneralLogger = exports.LogLevel = void 0;
const winston_1 = require("winston");
const winston_daily_rotate_file_1 = __importDefault(require("winston-daily-rotate-file"));
const inversify_binding_decorators_1 = require("inversify-binding-decorators");
/**
 * LogLevel enumeration defines the available log levels.
 */
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["Debug"] = 0] = "Debug";
    LogLevel[LogLevel["Error"] = 1] = "Error";
    LogLevel[LogLevel["Info"] = 2] = "Info";
})(LogLevel || (LogLevel = {}));
exports.LogLevel = LogLevel;
/**
 * GeneralLogger class is a utility class to manage logging within the application.
 */
let GeneralLogger = GeneralLogger_1 = class GeneralLogger {
    constructor() {
        this.logger = (0, winston_1.createLogger)(this.createLoggerOptions());
    }
    /**
     * Creates a console transport for logging.
     * @returns {transports.ConsoleTransportInstance} A Winston console transport instance.
     */
    createConsoleTransport() {
        const consoleTransport = new winston_1.transports.Console({
            level: "debug",
            handleExceptions: true,
            handleRejections: true
        });
        return consoleTransport;
    }
    /**
     * Creates a rotational file transport for logging.
     * @returns {DailyRotateFile} A Winston daily rotate file transport instance.
     */
    createRotationalFileTransport() {
        const rotationalFileTransport = new winston_daily_rotate_file_1.default({
            level: "error",
            filename: "logs/general-%DATE%.log",
            datePattern: "YYYY-MM-DD",
            zippedArchive: true,
            maxSize: "20m",
            maxFiles: "7d",
            silent: false
        });
        return rotationalFileTransport;
    }
    /**
     * Creates a logger options object for Winston.
     * @returns {LoggerOptions} A Winston logger options object.
     */
    createLoggerOptions() {
        const loggerOptions = {
            transports: [
                this.createConsoleTransport(),
                this.createRotationalFileTransport()
            ],
            defaultMeta: { service: "service-unknown" },
            format: winston_1.format.combine(winston_1.format.splat(), winston_1.format.timestamp({ format: "YYYY-MM-DD HH:mm:ss" }), winston_1.format.label({ label: "core-api" }), winston_1.format.printf(({ timestamp, level, message, service, label }) => {
                return `[${timestamp}] [${label}] [${service}] ${level}: ${message}`;
            }))
        };
        return loggerOptions;
    }
    /**
     * Retrieves the path and line number of the error.
     * @param error - An Error object containing error details.
     * @returns {string} A string containing the path and line number of the error.
     */
    getPathAndLine(error) {
        let pathLine = "";
        if (error.stack) {
            let callerLine = error.stack.split("\n")[1];
            let index = callerLine.indexOf("at ");
            pathLine = callerLine.substring(index + +2, callerLine.length);
        }
        return pathLine;
    }
    /**
     * Logs a message or error with the specified log level and service.
     * @param logLevel - The log level to use (Debug, Error, or Info).
     * @param content - The message or Error object to log.
     * @param service - The service name (optional) associated with the log.
     */
    log(logLevel, content, service) {
        let pathLine = "";
        let logMessageFormat = "";
        if (typeof content === "object") {
            pathLine = this.getPathAndLine(content);
            logMessageFormat = `${content.message} - (${content.name}) [file: %s]`;
        }
        else {
            logMessageFormat = content;
        }
        switch (logLevel) {
            case LogLevel.Debug:
                console.log(logMessageFormat, pathLine, { service });
                break;
            case LogLevel.Error:
                this.logger.error(logMessageFormat, pathLine, { service });
                break;
            case LogLevel.Info:
                this.logger.info(content, { service });
                break;
        }
    }
};
GeneralLogger = GeneralLogger_1 = __decorate([
    (0, inversify_binding_decorators_1.provide)(GeneralLogger_1),
    __metadata("design:paramtypes", [])
], GeneralLogger);
exports.GeneralLogger = GeneralLogger;
const Log = new GeneralLogger();
const log = Log.log.bind(Log);
exports.log = log;
