"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var Console_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Console = void 0;
const chalk_1 = __importDefault(require("chalk"));
const inversify_binding_decorators_1 = require("inversify-binding-decorators");
/**
 * Enum representing possible color styles for console output.
 */
var ColorStyle;
(function (ColorStyle) {
    ColorStyle[ColorStyle["None"] = 0] = "None";
    ColorStyle[ColorStyle["Yellow"] = 1] = "Yellow";
    ColorStyle[ColorStyle["Blue"] = 2] = "Blue";
    ColorStyle[ColorStyle["Green"] = 3] = "Green";
    ColorStyle[ColorStyle["Red"] = 4] = "Red";
})(ColorStyle || (ColorStyle = {}));
/**
 * The Console class provides methods for displaying styled messages in the console.
 * @provide Console
 */
let Console = Console_1 = class Console {
    /**
     * Print a message to the console with the specified color style.
     * @param message - The message to be printed.
     * @param colorStyle - The color style for the message.
     */
    printColor(message, colorStyle) {
        return __awaiter(this, void 0, void 0, function* () {
            switch (colorStyle) {
                case ColorStyle.Yellow:
                    return console.log(chalk_1.default.bgYellow.black(message));
                case ColorStyle.Blue:
                    return console.log(chalk_1.default.bgBlue.black(message));
                case ColorStyle.Green:
                    return console.log(chalk_1.default.bgGreen.black(message));
                case ColorStyle.Red:
                    return console.log(chalk_1.default.bgRed.black(message));
            }
        });
    }
    /**
     * Display a message in the console with details about the running server.
     * @param port - The port number the server is running on.
     * @param environment - The server environment.
     * @param consoleMessage - Optional application message details for console output.
     */
    messageServer(port, environment, consoleMessage) {
        return __awaiter(this, void 0, void 0, function* () {
            const appConsoleMessage = {
                appName: (consoleMessage === null || consoleMessage === void 0 ? void 0 : consoleMessage.appName) || "Application",
                appVersion: (consoleMessage === null || consoleMessage === void 0 ? void 0 : consoleMessage.appVersion) || "not provided",
            };
            let terminalColor = ColorStyle.None;
            switch (environment.toLowerCase()) {
                case "development":
                    terminalColor = ColorStyle.Yellow;
                    break;
                case "staging":
                    terminalColor = ColorStyle.Blue;
                    break;
                case "production":
                    terminalColor = ColorStyle.Green;
                    break;
                default:
                    terminalColor = ColorStyle.Red;
                    break;
            }
            this.printColor(`${appConsoleMessage.appName} version ${appConsoleMessage.appVersion} is running on ` +
                `port ${port} - Environment: ${environment}`, terminalColor);
        });
    }
};
Console = Console_1 = __decorate([
    (0, inversify_binding_decorators_1.provide)(Console_1)
], Console);
exports.Console = Console;
