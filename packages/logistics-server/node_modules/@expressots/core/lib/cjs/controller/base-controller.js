"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var BaseController_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseController = void 0;
const inversify_binding_decorators_1 = require("inversify-binding-decorators");
const error_1 = require("../error");
/**
 * The BaseController class is an abstract base class for controllers.
 * It provides methods for handling use case calls and sending appropriate responses.
 * @provide BaseController
 */
let BaseController = BaseController_1 = class BaseController {
    /**
     * Constructs a new BaseController instance with a specified service name.
     * @param serviceName - The name of the service associated with the controller.
     */
    constructor(serviceName) {
        this.serviceName = serviceName;
    }
    /**
     * Calls an asynchronous use case and sends an appropriate response based on the result.
     * @param useCase - A promise representing the asynchronous use case to call.
     * @param res - The Express response object.
     * @param successStatusCode - The HTTP status code to return upon successful execution.
     */
    callUseCaseAsync(useCase, res, successStatusCode) {
        return __awaiter(this, void 0, void 0, function* () {
            let dataReturn;
            try {
                dataReturn = yield useCase;
                return res.status(successStatusCode).json(dataReturn);
            }
            catch (error) {
                error_1.Report.Error(error);
            }
        });
    }
    /**
     * Calls a use case and sends an appropriate response based on the result.
     * @param useCase - The use case to call.
     * @param res - The Express response object.
     * @param successStatusCode - The HTTP status code to return upon successful execution.
     */
    callUseCase(useCase, res, successStatusCode) {
        let dataReturn;
        try {
            dataReturn = useCase;
            return res.status(successStatusCode).json(dataReturn);
        }
        catch (error) {
            error_1.Report.Error(error);
        }
    }
};
BaseController = BaseController_1 = __decorate([
    (0, inversify_binding_decorators_1.provide)(BaseController_1),
    __metadata("design:paramtypes", [String])
], BaseController);
exports.BaseController = BaseController;
