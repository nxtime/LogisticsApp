"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var AppError_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppError = void 0;
const inversify_binding_decorators_1 = require("inversify-binding-decorators");
/**
 * The AppError class extends the built-in Error class, adding a status code and service property.
 * It is designed for handling application-specific errors with more detailed information.
 * @provide AppError
 */
let AppError = AppError_1 = class AppError extends Error {
    /**
     * Constructs a new AppError instance.
     * @param statusCode - The status code associated with the error.
     * @param message - The error message.
     * @param service - An optional service name related to the error.
     */
    constructor(statusCode, message, service) {
        super(message);
        this.statusCode = statusCode;
        this.service = service;
    }
};
AppError = AppError_1 = __decorate([
    (0, inversify_binding_decorators_1.provide)(AppError_1),
    __metadata("design:paramtypes", [Number, String, String])
], AppError);
exports.AppError = AppError;
