"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StatusCode = void 0;
/* Http Error Code Response */
var InformationResponse;
(function (InformationResponse) {
    InformationResponse[InformationResponse["Continue"] = 100] = "Continue";
    InformationResponse[InformationResponse["SwitchingProtocols"] = 101] = "SwitchingProtocols";
    InformationResponse[InformationResponse["Processing"] = 102] = "Processing";
    InformationResponse[InformationResponse["eEarlyHints"] = 103] = "eEarlyHints";
})(InformationResponse || (InformationResponse = {}));
var SuccessfulResponse;
(function (SuccessfulResponse) {
    SuccessfulResponse[SuccessfulResponse["OK"] = 200] = "OK";
    SuccessfulResponse[SuccessfulResponse["Created"] = 201] = "Created";
    SuccessfulResponse[SuccessfulResponse["Accepted"] = 202] = "Accepted";
    SuccessfulResponse[SuccessfulResponse["NonAuthoritativeInformation"] = 203] = "NonAuthoritativeInformation";
    SuccessfulResponse[SuccessfulResponse["NoContent"] = 204] = "NoContent";
    SuccessfulResponse[SuccessfulResponse["ResetContent"] = 205] = "ResetContent";
    SuccessfulResponse[SuccessfulResponse["PartialContent"] = 206] = "PartialContent";
    SuccessfulResponse[SuccessfulResponse["MultiStatus"] = 207] = "MultiStatus";
    SuccessfulResponse[SuccessfulResponse["AlreadyReported"] = 208] = "AlreadyReported";
    SuccessfulResponse[SuccessfulResponse["IMUsed"] = 226] = "IMUsed";
})(SuccessfulResponse || (SuccessfulResponse = {}));
var RedirectionMessage;
(function (RedirectionMessage) {
    RedirectionMessage[RedirectionMessage["MultipleChoices"] = 300] = "MultipleChoices";
    RedirectionMessage[RedirectionMessage["MovedPermanently"] = 301] = "MovedPermanently";
    RedirectionMessage[RedirectionMessage["Found"] = 302] = "Found";
    RedirectionMessage[RedirectionMessage["SeeOther"] = 303] = "SeeOther";
    RedirectionMessage[RedirectionMessage["NotModified"] = 304] = "NotModified";
    RedirectionMessage[RedirectionMessage["TemporaryRedirect"] = 307] = "TemporaryRedirect";
    RedirectionMessage[RedirectionMessage["PermanentRedirect"] = 308] = "PermanentRedirect";
})(RedirectionMessage || (RedirectionMessage = {}));
var ClientErrorResponse;
(function (ClientErrorResponse) {
    ClientErrorResponse[ClientErrorResponse["BadRequest"] = 400] = "BadRequest";
    ClientErrorResponse[ClientErrorResponse["Unauthorized"] = 401] = "Unauthorized";
    ClientErrorResponse[ClientErrorResponse["PaymentRequired"] = 402] = "PaymentRequired";
    ClientErrorResponse[ClientErrorResponse["Forbidden"] = 403] = "Forbidden";
    ClientErrorResponse[ClientErrorResponse["NotFound"] = 404] = "NotFound";
    ClientErrorResponse[ClientErrorResponse["MethodNotAllowed"] = 405] = "MethodNotAllowed";
    ClientErrorResponse[ClientErrorResponse["NotAcceptable"] = 406] = "NotAcceptable";
    ClientErrorResponse[ClientErrorResponse["ProxyAuthenticationRequired"] = 407] = "ProxyAuthenticationRequired";
    ClientErrorResponse[ClientErrorResponse["RequestTimeout"] = 408] = "RequestTimeout";
    ClientErrorResponse[ClientErrorResponse["Conflict"] = 409] = "Conflict";
    ClientErrorResponse[ClientErrorResponse["Gone"] = 410] = "Gone";
    ClientErrorResponse[ClientErrorResponse["LengthRequired"] = 411] = "LengthRequired";
    ClientErrorResponse[ClientErrorResponse["PreconditionFailed"] = 412] = "PreconditionFailed";
    ClientErrorResponse[ClientErrorResponse["PayloadTooLarge"] = 413] = "PayloadTooLarge";
    ClientErrorResponse[ClientErrorResponse["URITooLong"] = 414] = "URITooLong";
    ClientErrorResponse[ClientErrorResponse["UnsupportedMediaType"] = 415] = "UnsupportedMediaType";
    ClientErrorResponse[ClientErrorResponse["RangeNotSatisfiable"] = 416] = "RangeNotSatisfiable";
    ClientErrorResponse[ClientErrorResponse["ExpectationFailed"] = 417] = "ExpectationFailed";
    ClientErrorResponse[ClientErrorResponse["ImATeapot"] = 418] = "ImATeapot";
    ClientErrorResponse[ClientErrorResponse["MisdirectedRequest"] = 421] = "MisdirectedRequest";
    ClientErrorResponse[ClientErrorResponse["UnprocessableEntity"] = 422] = "UnprocessableEntity";
    ClientErrorResponse[ClientErrorResponse["Locked"] = 423] = "Locked";
    ClientErrorResponse[ClientErrorResponse["FailedDependency"] = 424] = "FailedDependency";
    ClientErrorResponse[ClientErrorResponse["TooEarly"] = 425] = "TooEarly";
    ClientErrorResponse[ClientErrorResponse["UpgradeRequired"] = 426] = "UpgradeRequired";
    ClientErrorResponse[ClientErrorResponse["PreconditionRequired"] = 428] = "PreconditionRequired";
    ClientErrorResponse[ClientErrorResponse["TooManyRequests"] = 429] = "TooManyRequests";
    ClientErrorResponse[ClientErrorResponse["RequestHeaderFieldsTooLarge"] = 431] = "RequestHeaderFieldsTooLarge";
    ClientErrorResponse[ClientErrorResponse["UnavailableForLegalReasons"] = 451] = "UnavailableForLegalReasons";
})(ClientErrorResponse || (ClientErrorResponse = {}));
var ServerErrorResponse;
(function (ServerErrorResponse) {
    ServerErrorResponse[ServerErrorResponse["InternalServerError"] = 500] = "InternalServerError";
    ServerErrorResponse[ServerErrorResponse["NotImplemented"] = 501] = "NotImplemented";
    ServerErrorResponse[ServerErrorResponse["BadGateway"] = 502] = "BadGateway";
    ServerErrorResponse[ServerErrorResponse["ServiceUnavailable"] = 503] = "ServiceUnavailable";
    ServerErrorResponse[ServerErrorResponse["GatewayTimeout"] = 504] = "GatewayTimeout";
    ServerErrorResponse[ServerErrorResponse["HTTPVersionNotSupported"] = 505] = "HTTPVersionNotSupported";
    ServerErrorResponse[ServerErrorResponse["VariantAlsoNegotiates"] = 506] = "VariantAlsoNegotiates";
    ServerErrorResponse[ServerErrorResponse["InsufficientStorage"] = 507] = "InsufficientStorage";
    ServerErrorResponse[ServerErrorResponse["LoopDetected"] = 508] = "LoopDetected";
    ServerErrorResponse[ServerErrorResponse["NotExtended"] = 510] = "NotExtended";
    ServerErrorResponse[ServerErrorResponse["NetworkAuthenticationRequired"] = 511] = "NetworkAuthenticationRequired";
})(ServerErrorResponse || (ServerErrorResponse = {}));
const HttpStatusErrorCode = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, InformationResponse), SuccessfulResponse), RedirectionMessage), ClientErrorResponse), ServerErrorResponse);
const StatusCode = Object.assign({}, HttpStatusErrorCode);
exports.StatusCode = StatusCode;
