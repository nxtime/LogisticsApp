import { interfaces } from 'inversify-express-utils';
/**
 * The BaseController class is an abstract base class for controllers.
 * It provides methods for handling use case calls and sending appropriate responses.
 * @provide BaseController
 */
declare abstract class BaseController implements interfaces.Controller {
    private serviceName;
    /**
     * Constructs a new BaseController instance with a specified service name.
     * @param serviceName - The name of the service associated with the controller.
     */
    constructor(serviceName: string);
    /**
     * Calls an asynchronous use case and sends an appropriate response based on the result.
     * @param useCase - A promise representing the asynchronous use case to call.
     * @param res - The Express response object.
     * @param successStatusCode - The HTTP status code to return upon successful execution.
     */
    protected callUseCaseAsync(useCase: Promise<any>, res: any, successStatusCode: number): Promise<any>;
    /**
     * Calls a use case and sends an appropriate response based on the result.
     * @param useCase - The use case to call.
     * @param res - The Express response object.
     * @param successStatusCode - The HTTP status code to return upon successful execution.
     */
    protected callUseCase(useCase: any, res: any, successStatusCode: number): any;
}
export { BaseController };
//# sourceMappingURL=base-controller.d.ts.map