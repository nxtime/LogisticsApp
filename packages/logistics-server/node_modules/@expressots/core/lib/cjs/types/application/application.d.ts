import express from "express";
import { Container } from "inversify";
import { IApplicationMessageToConsole } from "../console/console";
/**
 * Enum representing possible server environments.
 */
declare enum ServerEnvironment {
    Development = "development",
    Staging = "staging",
    Production = "production"
}
/**
 * The Application class provides a way to configure and manage an Express application.
 * @provide Application
 */
declare class Application {
    private app;
    private port;
    private environment;
    /**
     * Constructs a new instance of the Application class.
     */
    constructor();
    /**
     * Configure services that should be initialized before the server starts.
     */
    protected configureServices(): void;
    /**
     * Configure services that should be executed after the server starts.
     */
    protected postServerInitialization(): void;
    /**
     * Perform actions or cleanup after the server is shutdown.
     */
    protected serverShutdown(): void;
    /**
     * Create and configure the Express application.
     * @param container - The InversifyJS container.
     * @param middlewares - An array of Express middlewares to be applied.
     * @returns The configured Application instance.
     */
    create(container: Container, middlewares?: express.RequestHandler[]): Application;
    /**
     * Start listening on the given port and environment.
     * @param port - The port number to listen on.
     * @param environment - The server environment.
     * @param consoleMessage - Optional message to display in the console.
     */
    listen(port: number, environment: ServerEnvironment, consoleMessage?: IApplicationMessageToConsole): void;
}
declare const appServerInstance: Application;
export { appServerInstance as AppInstance, Application, ServerEnvironment };
//# sourceMappingURL=application.d.ts.map